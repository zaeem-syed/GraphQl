# "A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
# scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# "Indicates what fields are available at the top level of a query operation."
# type Query {
#     "Find a single user by an identifying attribute."
#     # user(
#     #   "Search by primary key."
#     #   id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#     #   "Search by email address."
#     #   email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     # ): User @find

#     user(id:ID @eq, email: String @eq ): User @find


#     "List multiple users."
#     usersList(
#       "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#       name: String @where(operator: "like")
#     ): [User!]! @paginate(defaultCount: 10)
#     "Find a single movie by ID."
#     users: [User!]! @all

#     movies: [Movie!]! @all

# }

# "Account of a person who utilizes this application."
# type User {
#     "Unique primary key."
#     id: ID!

#     "Non-unique name."
#     name: String!

#     "Unique email address."
#     email: String!

#     "When the email was verified."
#     email_verified_at: DateTime

#     "When the account was created."
#     created_at: DateTime!

#     "When the account was last updated."
#     updated_at: DateTime!
# }

# type Movie {
#     id: ID!
#     title: String!
#     description: String
#     director: String
#     producer: String
#     release_date: String
#     runtime: Int
#     genre: String
#     language: String
#     rating: Float
#     poster_image: String
#     trailer_url: String
#     production_company: String
#     cast: String
#     budget: Float
#     box_office: Float
#     is_featured: Boolean
#     created_at: String
#     updated_at: String
# }


type Query{
    users: [User!]! @paginate
    user( id: ID @eq) :User @find
    movie: [Movie] @all
}

type User{
    id:ID
    name:String
    email:String
}

type Movie{
    id:ID
    title:String
}

type Mutation{
    createUser(name:String!, email:String! ,password:String!): User !@create

    updateUser(id:ID!, name:String!) : User! @update


}

